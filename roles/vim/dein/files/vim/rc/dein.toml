# base plugins

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  let cmd = 'make'
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {
\ '*': {
\     'hook/time/enable': '1',
\     'split': '',
\      },
\ }
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

# base plugins
# complete

[[plugins]]
repo = 'Shougo/neocomplete.vim'
hook_add = '''
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  "return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns = {
\   "ruby" : '[^. *\t]\.\w*\|\h\w*::',
\}
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
"let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)"
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'marcus/rsense'

#[[plugins]]
#repo = 'supermomonga/neocomplete-rsense.vim'

# complete
# unite plugins
[[plugins]]
repo    = 'Shougo/unite.vim'

[[plugins]]
repo    = 'ujihisa/unite-colorscheme'
depends = ['Shougo/unite.vim']

[[plugins]]
repo    = 'ujihisa/unite-locate'
depends = ['Shougo/unite.vim']

[[plugins]]
repo    = 'tacroe/unite-mark'
depends = ['Shougo/unite.vim']

[[plugins]]
repo    = 'zhaocai/unite-scriptnames'
depends = ['Shougo/unite.vim']

[[plugins]]
repo    = 'thinca/vim-editvar'
depends = ['Shougo/unite.vim']

[[plugins]]
repo    = 'thinca/vim-unite-history'
depends = ['Shougo/unite.vim']

[[plugins]]
repo    = 'ujihisa/unite-launch'
depends = ['Shougo/unite.vim']

[[plugins]]
repo    = 'Shougo/neomru.vim'
depends = ['Shougo/unite.vim']

[[plugins]]
repo    = 'tsukkee/unite-tag'
depends = ['Shougo/unite.vim']

[[plugins]]
repo    = 'sorah/unite-ghq'
depends = ['Shougo/unite.vim']
# unite plugins
# edit plugins
[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'Townk/vim-autoclose'

[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'vim-scripts/matchit.zip'

[[plugins]]
repo = 'vim-scripts/Align'

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'kana/vim-smartchr'
on_i = 1

[[plugins]]
repo = 'kana/vim-smartinput'
on_i = 1
# edit plugins
# utils plugins
[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'Townk/vim-autoclose'

[[plugins]]
repo = 'rhysd/vim-textobj-ruby'

[[plugins]]
repo = 'akiyan/vim-textobj-xml-attribute'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let NERDTreeShowHidden = 1
  noremap <silent><C-f> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'

[[plugins]]
repo = 'Shougo/vimfiler'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'vim-scripts/dbext.vim'

[[plugins]]
repo = 'vim-scripts/SQLUtilities'

#[[plugins]]
#repo = 'sgur/vim-gf-autoload'

[[plugins]]
repo = 't9md/vim-choosewin'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'osyo-manga/vim-anzu'

[[plugins]]
repo = 'rking/ag.vim'

[[plugins]]
repo = 'sjl/gundo.vim'
hook_add = '''
noremap U :GundoToggle<CR>
'''
# utils plugins
# git plugins
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'jaxbot/github-issues.vim'
lazy = 1

[[plugins]]
repo = 'moznion/github-commit-comment.vim'
lazy = 1

[[plugins]]
repo = 'rhysd/github-complete.vim'

[[plugins]]
repo = 'takahirojin/gbr.vim'

[[plugins]]
repo = 'mattn/gist-vim'

[[plugins]]
repo = 'lambdalisue/vim-gista'

# git plugins
# ruby plugins
[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = 'ruby'

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'ruby'

[[plugins]]
repo = 'tpope/vim-bundler'
on_ft = 'ruby'

[[plugins]]
repo = 'osyo-manga/vim-monster'
on_ft = 'ruby'
hook_add = '''
let g:monster#completion#rcodetools#backend = "async_rct_complete"
'''

#[[plugins]]
#repo = 'todesking/ruby_hl_lvar.vim'

[[plugins]]
repo = 'slim-template/vim-slim.git'
on_ft = 'slim'

[[plugins]]
repo = 'tpope/vim-dispatch'
on_ft = 'ruby'

[[plugins]]
repo = 'thoughtbot/vim-rspec'
on_ft = 'ruby'

# ruby plugins
# language plugins
[[plugins]]
repo = 'thinca/vim-prettyprint'
on_ft = 'vim'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'chase/vim-ansible-yaml'
on_ft = ['yaml','yml']

[[plugins]]
repo = 'pearofducks/ansible-vim'
on_ft = ['yaml','yml']
hook_add = '''
 let g:ansible_unindent_after_newline = 1
'''

[[plugins]]
repo = 'godlygeek/tabular'
on_ft = ['markdown', 'md']

[[plugins]]
repo = 'kannokanno/previm'
on_ft = ['markdown', 'md']

[[plugins]]
repo = 'marijnh/tern_for_vim'
on_ft = 'javascript'

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = 'javascript'

# language plugins
# syntax plugins

[[plugins]]
repo = 'scrooloose/syntastic'
hook_add = '''
let g:syntastic_python_checkers = ['pyflakes', 'pep8']
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_emit_conflict_warnings = 0
let g:ale_completion_enabled = 1
let g:ale_sign_column_always = 1
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0
" ファイルオープン時にチェックしたくない場合
let g:ale_lint_on_enter = 0
let g:ale_open_list = 1
" エラーと警告がなくなっても開いたままにする
let g:ale_keep_list_window_open = 1
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['Shougo/context_filetype.vim', 'kana/vim-textobj-user']

[[plugins]]
repo = 'elzr/vim-json'

# syntax plugins
# colors plugins
[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_post_source = '''
" タブバーのカスタマイズを有効にする
let g:airline#extensions#tabline#enabled = 1

" タブバーの右領域を非表示にする
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#show_close_button = 0
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'mrkn/mrkn256.vim'

[[plugins]]
repo = 'vim-scripts/wombat256.vim'

[[plugins]]
repo = 'altercation/vim-colors-solarized'

[[plugins]]
repo = 'nanotech/jellybeans.vim'

[[plugins]]
repo = 'jpo/vim-railscasts-theme'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_post_source = '''
let g:lightline = {
        \ 'colorscheme': 'wombat256',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [
        \     [ 'mode', 'paste' ],
        \     [ 'ale' ],
        \     [ 'fugitive', 'filename' ]
        \   ]
        \ },
        \ 'component_function': {
        \   'modified': 'LightlineModified',
        \   'readonly': 'LightlineReadonly',
        \   'fugitive': 'LightlineFugitive',
        \   'filename': 'LightlineFilename',
        \   'fileformat': 'LightlineFileformat',
        \   'filetype': 'LightlineFiletype',
        \   'fileencoding': 'LightlineFileencoding',
        \   'mode': 'LightlineMode',
        \   'ale': 'ALEGetStatusLine'
        \ }
        \ }

function! LightlineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
    return fugitive#head()
  else
    return ''
  endif
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! ALEGetStatusLine()
  let l:count = ale#statusline#Count(bufnr(''))
  let l:errors = l:count.error + l:count.style_error
  let l:warnings = l:count.warning + l:count.style_warning
  return l:count.total == 0 ? 'OK' : 'E:' . l:errors . ' W: ' . l:warnings
endfunction
'''

# colors plugins
# python plugins

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = 'python'

[[plugins]]
repo = 'andviro/flake8-vim'
on_ft = 'python'

[[plugins]]
repo = 'tell-k/vim-autopep8'
hook_add = '''
let g:autopep8_ignore="E501,W293"
let g:autopep8_select="E501,W293"
let g:autopep8_pep8_passes=100
let g:autopep8_max_line_length=79
let g:autopep8_aggressive=1
let g:autopep8_aggressive=2
let g:autopep8_disable_show_diff=1
let g:autopep8_diff_type='horizontal'
let g:autopep8_diff_type='vertical'
autocmd FileType python noremap <buffer> <F8> :call Autopep8()<CR>
autocmd FileType python set equalprg=autopep8\ -
'''
on_ft = 'python'

# python plugins
